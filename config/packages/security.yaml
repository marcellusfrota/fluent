security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    role_hierarchy:
        ROLE_SUPER_ADMIN:   [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
        ROLE_ADMIN:         [ROLE_USER]
    providers:
        in_memory: 
            memory:
                users:
                    admin:
                        password: $2y$12$kl0pCIKa2SgOzT/FE26whOaKxiMeyu1LLanhzgNyhkv8nYpIw.lXu
                        roles: 'ROLE_ADMIN'
                    user:
                        password: $2y$12$QnPvWs44FXLGnCTZQB4oMunM/68sYTaHvrkmLoqWW3yKudJL/WYhS
                        roles: 'ROLE_USER'
        fluent_db:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            http_basic: ~
            provider: fluent_db
            anonymous: true
            form_login:
                always_use_default_target_path: true
                login_path: /login
                check_path: /login
            logout:
                path:   /logout
                target: /
        # default:
        #     anonymous: ~
        #     http_basic: ~

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/register, roles: ROLE_ADMIN }
        - { path: ^/, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

    encoders:
        # Symfony\Component\Security\Core\User\User: plaintext
        Symfony\Component\Security\Core\User\User:
            algorithm: bcrypt
            cost: 12
        # If you are running PHP 7.2+ or have the libsodium extension installed, 
        # then the recommended hashing algorithm to use is Argon2i.
        App\Entity\User:
            algorithm: bcrypt

